import * as vscode from 'vscode';

export class ResultFormatter {
    static formatAnalysisResult(
        analysis: string, 
        issueDescription: string, 
        fromCommit: string, 
        toCommit: string
    ): string {
        const timestamp = new Date().toLocaleString();
        
        return `# AI Crash Finder Analysis Report

## Summary
- **Analysis Date**: ${timestamp}
- **Commit Range**: \`${fromCommit}\` â†’ \`${toCommit}\`
- **Issue Description**: ${issueDescription}

---

## Analysis Results

${analysis}

---

## Next Steps

1. Review the identified suspicious code sections
2. Check the suggested files and line numbers
3. Validate the analysis with your team
4. Implement the suggested solutions

---

*Generated by AI Crash Finder*
`;
    }

    static createWebviewContent(markdownContent: string): string {
        return `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Crash Finder Results</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;
            line-height: 1.6;
            color: var(--vscode-editor-foreground);
            background-color: var(--vscode-editor-background);
            padding: 20px;
            max-width: 900px;
            margin: 0 auto;
        }
        h1 {
            color: var(--vscode-titleBar-activeForeground);
            border-bottom: 2px solid var(--vscode-panel-border);
            padding-bottom: 10px;
        }
        h2 {
            color: var(--vscode-editor-foreground);
            margin-top: 30px;
        }
        pre {
            background-color: var(--vscode-textBlockQuote-background);
            border: 1px solid var(--vscode-panel-border);
            border-radius: 4px;
            padding: 12px;
            overflow-x: auto;
        }
        code {
            background-color: var(--vscode-textBlockQuote-background);
            padding: 2px 4px;
            border-radius: 3px;
            font-family: 'Courier New', Consolas, monospace;
        }
        ul, ol {
            padding-left: 30px;
        }
        li {
            margin: 8px 0;
        }
        hr {
            border: none;
            border-top: 1px solid var(--vscode-panel-border);
            margin: 30px 0;
        }
        .summary-item {
            margin: 10px 0;
        }
        .summary-item strong {
            color: var(--vscode-textLink-foreground);
        }
        .next-steps {
            background-color: var(--vscode-textBlockQuote-background);
            border-left: 4px solid var(--vscode-textLink-activeForeground);
            padding: 15px;
            margin: 20px 0;
        }
        .footer {
            text-align: center;
            color: var(--vscode-descriptionForeground);
            font-style: italic;
            margin-top: 40px;
        }
    </style>
</head>
<body>
    ${markdownToHtml(markdownContent)}
</body>
</html>`;
    }
}

function markdownToHtml(markdown: string): string {
    // Basic markdown to HTML conversion
    let html = markdown
        // Headers
        .replace(/^### (.*$)/gim, '<h3>$1</h3>')
        .replace(/^## (.*$)/gim, '<h2>$1</h2>')
        .replace(/^# (.*$)/gim, '<h1>$1</h1>')
        // Bold
        .replace(/\*\*(.+?)\*\*/g, '<strong>$1</strong>')
        // Italic
        .replace(/\*(.+?)\*/g, '<em>$1</em>')
        // Code blocks
        .replace(/```[\s\S]*?```/g, (match) => {
            const code = match.replace(/```/g, '');
            return `<pre><code>${escapeHtml(code)}</code></pre>`;
        })
        // Inline code
        .replace(/`(.+?)`/g, '<code>$1</code>')
        // Line breaks
        .replace(/\n/g, '<br>')
        // Horizontal rules
        .replace(/---/g, '<hr>')
        // Lists
        .replace(/^\d+\. (.+)$/gim, '<li>$1</li>')
        .replace(/^- (.+)$/gim, '<li>$1</li>');
    
    // Wrap consecutive list items
    html = html.replace(/(<li>.*?<\/li>(<br>)?)+/g, (match) => {
        return `<ol>${match.replace(/<br>/g, '')}</ol>`;
    });
    
    return html;
}

function escapeHtml(text: string): string {
    const map: { [key: string]: string } = {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        "'": '&#039;'
    };
    return text.replace(/[&<>"']/g, m => map[m]);
}
